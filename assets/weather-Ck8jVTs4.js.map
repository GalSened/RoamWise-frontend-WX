{"version":3,"file":"weather-Ck8jVTs4.js","sources":["../../src/providers/weather/openweather.ts"],"sourcesContent":["import type { WeatherProvider, WeatherNow, WeatherForecast } from '@/types';\nimport { AppError } from '@/types';\nimport { telemetry } from '@/lib/telemetry';\n\ninterface OpenWeatherConfig {\n  apiKey: string;\n  units?: 'metric' | 'imperial';\n  language?: string;\n}\n\ninterface OpenWeatherResponse {\n  current: {\n    temp: number;\n    feels_like: number;\n    humidity: number;\n    pressure: number;\n    visibility: number;\n    wind_speed: number;\n    wind_deg: number;\n    weather: Array<{\n      main: string;\n      description: string;\n      icon: string;\n    }>;\n    clouds: { all: number };\n    uvi: number;\n    dt: number;\n    sunrise: number;\n    sunset: number;\n  };\n  hourly?: Array<{\n    dt: number;\n    temp: number;\n    pop: number;\n    wind_speed: number;\n    weather: Array<{\n      main: string;\n      description: string;\n      icon: string;\n    }>;\n  }>;\n  daily?: Array<{\n    dt: number;\n    temp: { max: number; min: number };\n    pop: number;\n    wind_speed: number;\n    weather: Array<{\n      main: string;\n      description: string;\n      icon: string;\n    }>;\n    sunrise: number;\n    sunset: number;\n  }>;\n}\n\nexport class OpenWeatherProvider implements WeatherProvider {\n  private config: OpenWeatherConfig;\n  private baseUrl = 'https://api.openweathermap.org/data/3.0';\n\n  constructor(config: OpenWeatherConfig) {\n    this.config = {\n      units: 'metric',\n      language: 'en',\n      ...config\n    };\n  }\n\n  async getCurrent(lat: number, lng: number): Promise<WeatherNow> {\n    const startTime = performance.now();\n    \n    try {\n      const url = new URL(`${this.baseUrl}/onecall`);\n      url.searchParams.set('lat', lat.toString());\n      url.searchParams.set('lon', lng.toString());\n      url.searchParams.set('appid', this.config.apiKey);\n      url.searchParams.set('units', this.config.units!);\n      url.searchParams.set('lang', this.config.language!);\n      url.searchParams.set('exclude', 'minutely,hourly,daily,alerts');\n\n      const response = await fetch(url.toString());\n      \n      if (!response.ok) {\n        throw new AppError(\n          `Weather API error: ${response.status}`,\n          'WEATHER_API_ERROR',\n          response.status\n        );\n      }\n\n      const data: OpenWeatherResponse = await response.json();\n      const weather = this.transformCurrentWeather(data);\n      \n      telemetry.track('weather_current', {\n        lat,\n        lng,\n        duration: performance.now() - startTime,\n        condition: weather.condition\n      });\n\n      return weather;\n    } catch (error) {\n      telemetry.track('weather_current_error', {\n        lat,\n        lng,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: performance.now() - startTime\n      });\n      throw error;\n    }\n  }\n\n  async getForecast(lat: number, lng: number, at?: Date): Promise<WeatherForecast> {\n    const startTime = performance.now();\n    \n    try {\n      const url = new URL(`${this.baseUrl}/onecall`);\n      url.searchParams.set('lat', lat.toString());\n      url.searchParams.set('lon', lng.toString());\n      url.searchParams.set('appid', this.config.apiKey);\n      url.searchParams.set('units', this.config.units!);\n      url.searchParams.set('lang', this.config.language!);\n      url.searchParams.set('exclude', 'minutely,alerts');\n\n      const response = await fetch(url.toString());\n      \n      if (!response.ok) {\n        throw new AppError(\n          `Weather API error: ${response.status}`,\n          'WEATHER_API_ERROR',\n          response.status\n        );\n      }\n\n      const data: OpenWeatherResponse = await response.json();\n      const forecast = this.transformForecast(data);\n      \n      telemetry.track('weather_forecast', {\n        lat,\n        lng,\n        duration: performance.now() - startTime,\n        hourly_count: forecast.hourly.length,\n        daily_count: forecast.daily.length\n      });\n\n      return forecast;\n    } catch (error) {\n      telemetry.track('weather_forecast_error', {\n        lat,\n        lng,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: performance.now() - startTime\n      });\n      throw error;\n    }\n  }\n\n  private transformCurrentWeather(data: OpenWeatherResponse): WeatherNow {\n    const current = data.current;\n    const weather = current.weather[0];\n    const now = new Date();\n    const sunrise = new Date(current.sunrise * 1000);\n    const sunset = new Date(current.sunset * 1000);\n    \n    return {\n      temperature: current.temp,\n      feelsLike: current.feels_like,\n      humidity: current.humidity,\n      pressure: current.pressure,\n      visibility: current.visibility / 1000, // Convert to km\n      windSpeed: current.wind_speed,\n      windDirection: current.wind_deg,\n      precipitation: 0, // Current precipitation not provided in current weather\n      cloudCover: current.clouds.all,\n      uvIndex: current.uvi,\n      condition: weather.description,\n      icon: this.transformIcon(weather.icon),\n      isDaylight: now >= sunrise && now <= sunset\n    };\n  }\n\n  private transformForecast(data: OpenWeatherResponse): WeatherForecast {\n    return {\n      hourly: (data.hourly || []).map(hour => ({\n        time: new Date(hour.dt * 1000),\n        temperature: hour.temp,\n        precipitation: hour.pop * 100, // Convert probability to percentage\n        windSpeed: hour.wind_speed,\n        condition: hour.weather[0]?.description || '',\n        icon: this.transformIcon(hour.weather[0]?.icon || '')\n      })),\n      daily: (data.daily || []).map(day => ({\n        date: new Date(day.dt * 1000),\n        temperatureMax: day.temp.max,\n        temperatureMin: day.temp.min,\n        precipitation: 0, // Daily precipitation sum not provided\n        precipitationProbability: day.pop * 100,\n        windSpeed: day.wind_speed,\n        condition: day.weather[0]?.description || '',\n        icon: this.transformIcon(day.weather[0]?.icon || ''),\n        sunrise: new Date(day.sunrise * 1000),\n        sunset: new Date(day.sunset * 1000)\n      }))\n    };\n  }\n\n  private transformIcon(openWeatherIcon: string): string {\n    // Map OpenWeatherMap icons to emoji/unicode icons\n    const iconMap: Record<string, string> = {\n      '01d': '‚òÄÔ∏è',   // clear sky day\n      '01n': 'üåô',   // clear sky night\n      '02d': '‚õÖ',   // few clouds day\n      '02n': '‚òÅÔ∏è',   // few clouds night\n      '03d': '‚òÅÔ∏è',   // scattered clouds\n      '03n': '‚òÅÔ∏è',   // scattered clouds\n      '04d': '‚òÅÔ∏è',   // broken clouds\n      '04n': '‚òÅÔ∏è',   // broken clouds\n      '09d': 'üåßÔ∏è',   // shower rain\n      '09n': 'üåßÔ∏è',   // shower rain\n      '10d': 'üå¶Ô∏è',   // rain day\n      '10n': 'üåßÔ∏è',   // rain night\n      '11d': '‚õàÔ∏è',   // thunderstorm\n      '11n': '‚õàÔ∏è',   // thunderstorm\n      '13d': 'üå®Ô∏è',   // snow\n      '13n': 'üå®Ô∏è',   // snow\n      '50d': 'üå´Ô∏è',   // mist\n      '50n': 'üå´Ô∏è'    // mist\n    };\n\n    return iconMap[openWeatherIcon] || 'üå§Ô∏è';\n  }\n}\n\n// Factory function\nexport function createOpenWeatherProvider(apiKey: string): WeatherProvider {\n  return new OpenWeatherProvider({ apiKey });\n}"],"names":["OpenWeatherProvider","config","__publicField","lat","lng","startTime","url","response","AppError","data","weather","telemetry","error","at","forecast","current","now","sunrise","sunset","hour","_a","_b","day","openWeatherIcon","createOpenWeatherProvider","apiKey"],"mappings":"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"}