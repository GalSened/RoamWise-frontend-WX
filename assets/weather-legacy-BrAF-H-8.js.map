{"version":3,"file":"weather-legacy-BrAF-H-8.js","sources":["../../src/providers/weather/openweather.ts"],"sourcesContent":["import type { WeatherProvider, WeatherNow, WeatherForecast } from '@/types';\nimport { AppError } from '@/types';\nimport { telemetry } from '@/lib/telemetry';\n\ninterface OpenWeatherConfig {\n  apiKey: string;\n  units?: 'metric' | 'imperial';\n  language?: string;\n}\n\ninterface OpenWeatherResponse {\n  current: {\n    temp: number;\n    feels_like: number;\n    humidity: number;\n    pressure: number;\n    visibility: number;\n    wind_speed: number;\n    wind_deg: number;\n    weather: Array<{\n      main: string;\n      description: string;\n      icon: string;\n    }>;\n    clouds: { all: number };\n    uvi: number;\n    dt: number;\n    sunrise: number;\n    sunset: number;\n  };\n  hourly?: Array<{\n    dt: number;\n    temp: number;\n    pop: number;\n    wind_speed: number;\n    weather: Array<{\n      main: string;\n      description: string;\n      icon: string;\n    }>;\n  }>;\n  daily?: Array<{\n    dt: number;\n    temp: { max: number; min: number };\n    pop: number;\n    wind_speed: number;\n    weather: Array<{\n      main: string;\n      description: string;\n      icon: string;\n    }>;\n    sunrise: number;\n    sunset: number;\n  }>;\n}\n\nexport class OpenWeatherProvider implements WeatherProvider {\n  private config: OpenWeatherConfig;\n  private baseUrl = 'https://api.openweathermap.org/data/3.0';\n\n  constructor(config: OpenWeatherConfig) {\n    this.config = {\n      units: 'metric',\n      language: 'en',\n      ...config\n    };\n  }\n\n  async getCurrent(lat: number, lng: number): Promise<WeatherNow> {\n    const startTime = performance.now();\n    \n    try {\n      const url = new URL(`${this.baseUrl}/onecall`);\n      url.searchParams.set('lat', lat.toString());\n      url.searchParams.set('lon', lng.toString());\n      url.searchParams.set('appid', this.config.apiKey);\n      url.searchParams.set('units', this.config.units!);\n      url.searchParams.set('lang', this.config.language!);\n      url.searchParams.set('exclude', 'minutely,hourly,daily,alerts');\n\n      const response = await fetch(url.toString());\n      \n      if (!response.ok) {\n        throw new AppError(\n          `Weather API error: ${response.status}`,\n          'WEATHER_API_ERROR',\n          response.status\n        );\n      }\n\n      const data: OpenWeatherResponse = await response.json();\n      const weather = this.transformCurrentWeather(data);\n      \n      telemetry.track('weather_current', {\n        lat,\n        lng,\n        duration: performance.now() - startTime,\n        condition: weather.condition\n      });\n\n      return weather;\n    } catch (error) {\n      telemetry.track('weather_current_error', {\n        lat,\n        lng,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: performance.now() - startTime\n      });\n      throw error;\n    }\n  }\n\n  async getForecast(lat: number, lng: number, at?: Date): Promise<WeatherForecast> {\n    const startTime = performance.now();\n    \n    try {\n      const url = new URL(`${this.baseUrl}/onecall`);\n      url.searchParams.set('lat', lat.toString());\n      url.searchParams.set('lon', lng.toString());\n      url.searchParams.set('appid', this.config.apiKey);\n      url.searchParams.set('units', this.config.units!);\n      url.searchParams.set('lang', this.config.language!);\n      url.searchParams.set('exclude', 'minutely,alerts');\n\n      const response = await fetch(url.toString());\n      \n      if (!response.ok) {\n        throw new AppError(\n          `Weather API error: ${response.status}`,\n          'WEATHER_API_ERROR',\n          response.status\n        );\n      }\n\n      const data: OpenWeatherResponse = await response.json();\n      const forecast = this.transformForecast(data);\n      \n      telemetry.track('weather_forecast', {\n        lat,\n        lng,\n        duration: performance.now() - startTime,\n        hourly_count: forecast.hourly.length,\n        daily_count: forecast.daily.length\n      });\n\n      return forecast;\n    } catch (error) {\n      telemetry.track('weather_forecast_error', {\n        lat,\n        lng,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: performance.now() - startTime\n      });\n      throw error;\n    }\n  }\n\n  private transformCurrentWeather(data: OpenWeatherResponse): WeatherNow {\n    const current = data.current;\n    const weather = current.weather[0];\n    const now = new Date();\n    const sunrise = new Date(current.sunrise * 1000);\n    const sunset = new Date(current.sunset * 1000);\n    \n    return {\n      temperature: current.temp,\n      feelsLike: current.feels_like,\n      humidity: current.humidity,\n      pressure: current.pressure,\n      visibility: current.visibility / 1000, // Convert to km\n      windSpeed: current.wind_speed,\n      windDirection: current.wind_deg,\n      precipitation: 0, // Current precipitation not provided in current weather\n      cloudCover: current.clouds.all,\n      uvIndex: current.uvi,\n      condition: weather.description,\n      icon: this.transformIcon(weather.icon),\n      isDaylight: now >= sunrise && now <= sunset\n    };\n  }\n\n  private transformForecast(data: OpenWeatherResponse): WeatherForecast {\n    return {\n      hourly: (data.hourly || []).map(hour => ({\n        time: new Date(hour.dt * 1000),\n        temperature: hour.temp,\n        precipitation: hour.pop * 100, // Convert probability to percentage\n        windSpeed: hour.wind_speed,\n        condition: hour.weather[0]?.description || '',\n        icon: this.transformIcon(hour.weather[0]?.icon || '')\n      })),\n      daily: (data.daily || []).map(day => ({\n        date: new Date(day.dt * 1000),\n        temperatureMax: day.temp.max,\n        temperatureMin: day.temp.min,\n        precipitation: 0, // Daily precipitation sum not provided\n        precipitationProbability: day.pop * 100,\n        windSpeed: day.wind_speed,\n        condition: day.weather[0]?.description || '',\n        icon: this.transformIcon(day.weather[0]?.icon || ''),\n        sunrise: new Date(day.sunrise * 1000),\n        sunset: new Date(day.sunset * 1000)\n      }))\n    };\n  }\n\n  private transformIcon(openWeatherIcon: string): string {\n    // Map OpenWeatherMap icons to emoji/unicode icons\n    const iconMap: Record<string, string> = {\n      '01d': '‚òÄÔ∏è',   // clear sky day\n      '01n': 'üåô',   // clear sky night\n      '02d': '‚õÖ',   // few clouds day\n      '02n': '‚òÅÔ∏è',   // few clouds night\n      '03d': '‚òÅÔ∏è',   // scattered clouds\n      '03n': '‚òÅÔ∏è',   // scattered clouds\n      '04d': '‚òÅÔ∏è',   // broken clouds\n      '04n': '‚òÅÔ∏è',   // broken clouds\n      '09d': 'üåßÔ∏è',   // shower rain\n      '09n': 'üåßÔ∏è',   // shower rain\n      '10d': 'üå¶Ô∏è',   // rain day\n      '10n': 'üåßÔ∏è',   // rain night\n      '11d': '‚õàÔ∏è',   // thunderstorm\n      '11n': '‚õàÔ∏è',   // thunderstorm\n      '13d': 'üå®Ô∏è',   // snow\n      '13n': 'üå®Ô∏è',   // snow\n      '50d': 'üå´Ô∏è',   // mist\n      '50n': 'üå´Ô∏è'    // mist\n    };\n\n    return iconMap[openWeatherIcon] || 'üå§Ô∏è';\n  }\n}\n\n// Factory function\nexport function createOpenWeatherProvider(apiKey: string): WeatherProvider {\n  return new OpenWeatherProvider({ apiKey });\n}"],"names":["apiKey","OpenWeatherProvider","config","baseUrl","constructor","this","units","language","getCurrent","lat","lng","startTime","performance","now","url","URL","searchParams","set","toString","response","fetch","ok","AppError","status","data","json","weather","transformCurrentWeather","telemetry","track","duration","condition","error","Error","message","getForecast","at","forecast","transformForecast","hourly_count","hourly","length","daily_count","daily","current","Date","sunrise","sunset","temperature","temp","feelsLike","feels_like","humidity","pressure","visibility","windSpeed","wind_speed","windDirection","wind_deg","precipitation","cloudCover","clouds","all","uvIndex","uvi","description","icon","transformIcon","isDaylight","map","hour","time","dt","pop","day","date","temperatureMax","max","temperatureMin","min","precipitationProbability","openWeatherIcon"],"mappings":"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"}